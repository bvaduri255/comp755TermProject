{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"id":"3winDkBw6tl4","executionInfo":{"status":"ok","timestamp":1696893717108,"user_tz":240,"elapsed":2321,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}}},"outputs":[],"source":["import numpy as np\n","from sklearn.datasets import make_classification\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","import pandas as pd"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0Zk9E-WfVjRK","executionInfo":{"status":"ok","timestamp":1696893735950,"user_tz":240,"elapsed":17709,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}},"outputId":"1d7acd0a-85bd-4241-a0ee-f36471a99440"},"execution_count":3,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["dataset = pd.read_csv('/content/drive/MyDrive/ML project/heart.csv')\n","target_vector = (dataset['target'].values)\n","design = (dataset.drop(['target'], 'columns')).to_numpy()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wJou9UEWKL_B","executionInfo":{"status":"ok","timestamp":1696893737003,"user_tz":240,"elapsed":1057,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}},"outputId":"999790f8-b433-4ecb-d4a7-bb13253eadee"},"execution_count":4,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-4-0848d63e3a59>:3: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n","  design = (dataset.drop(['target'], 'columns')).to_numpy()\n"]}]},{"cell_type":"code","source":["def train_model(X, y, eval_instances_ratio=0.2):\n","  # Calculate eval instances\n","  assert len(X) == len(y)\n","  eval_instances = int(np.ceil(len(X) * eval_instances_ratio))\n","\n","  # Shuffle, remove last eval_instances\n","  np.random.shuffle(X)\n","  train_x, eval_x = X[:eval_instances], X[-eval_instances:]\n","  train_y, eval_y = y[:eval_instances], y[-eval_instances:]\n","\n","  # Train model\n","  model = LogisticRegression(solver='lbfgs', max_iter=100000)\n","  model.fit(train_x, train_y)\n","  coef = model.coef_\n","  intercept = model.intercept_\n","  classes = model.classes_\n","  return coef, intercept, classes, model, eval_x, eval_y\n"],"metadata":{"id":"z7-CrmBw9f42","executionInfo":{"status":"ok","timestamp":1696893831139,"user_tz":240,"elapsed":11,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["#TOTAL_SAMPLES = 1000000\n","SPLITS = 5\n","\n","# Generate syntetic dataset\n","#x, y = make_classification(n_samples=TOTAL_SAMPLES, n_features=10, random_state=42)\n","\n","# Split x, y\n","x_splits = np.split(design, SPLITS)\n","y_splits = np.split(target_vector, SPLITS)\n","\n","# Train seperate models\n","coefs, intercepts, evals_x, evals_y = [] , [] , [], []\n","classes = None\n","split_models = []\n","for i in range(SPLITS-1):\n","  x = x_splits[i]\n","  y = y_splits[i]\n","\n","  coef, intercept, classes, model, eval_x, eval_y = train_model(x, y)\n","  coefs.append(coef)\n","  intercepts.append(intercept)\n","  evals_x.append(eval_x)\n","  evals_y.append(eval_y)\n","  split_models.append(model)\n","\n","  classes = classes\n","\n","\n","aggregate_model = LogisticRegression()\n","\n","avg_agg_coefs = np.sum(np.sum(coefs, axis=1), axis=0) / (SPLITS-1)\n","aggregate_model.coef_ = avg_agg_coefs.reshape(1, 13)\n","\n","avg_agg_intercepts = np.array(np.sum(intercepts) / (SPLITS-1))\n","aggregate_model.intercept_ = avg_agg_intercepts.reshape(1,)\n","\n","aggregate_model.classes_ = classes\n","\n","test_x, test_y = x_splits[-1], y_splits[-1]\n","\n","score = aggregate_model.score(test_x, test_y)\n","print(score)\n","\n","split_scores = []\n","for idx, model in enumerate(split_models):\n","  score = model.score(test_x, test_y)\n","  print(f\"Split number {idx+1}: {score}\")\n","  split_scores.append(score)\n","\n","print(f\"Average split scores: {np.mean(split_scores)}\")"],"metadata":{"id":"U19jDKB67Cor","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696893833364,"user_tz":240,"elapsed":623,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}},"outputId":"03cadeef-0c00-4651-c6c5-33b40b9e6a87"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["0.43902439024390244\n","Split number 1: 0.44878048780487806\n","Split number 2: 0.45365853658536587\n","Split number 3: 0.44390243902439025\n","Split number 4: 0.5609756097560976\n","Average split scores: 0.47682926829268296\n"]}]},{"cell_type":"code","source":["full_model = LogisticRegression(solver='lbfgs', max_iter=100000)\n","X_train, X_test, y_train, y_test = train_test_split(design, target_vector, test_size=0.2, random_state=42)\n","full_model.fit(X_train, y_train)\n","full_score = full_model.score(X_test, y_test)\n","print(full_score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UjcUuU5ANrOP","executionInfo":{"status":"ok","timestamp":1696893772642,"user_tz":240,"elapsed":562,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}},"outputId":"a0a17346-45c3-4ceb-8d46-47ed54b6c295"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stdout","text":["0.7951219512195122\n"]}]}]}