{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"gpuType":"T4"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU"},"cells":[{"cell_type":"code","execution_count":4,"metadata":{"id":"3winDkBw6tl4","executionInfo":{"status":"ok","timestamp":1696803639323,"user_tz":240,"elapsed":7,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}}},"outputs":[],"source":["import numpy as np\n","from sklearn.datasets import make_classification\n","from sklearn.model_selection import train_test_split\n","from sklearn.linear_model import LogisticRegression\n","import pandas as pd"]},{"cell_type":"code","source":["from google.colab import files\n","\n","\n","\n","uploaded = files.upload()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":74},"id":"jumiA2nDKD8c","executionInfo":{"status":"ok","timestamp":1696803380515,"user_tz":240,"elapsed":4769,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}},"outputId":"e2478dde-ea10-460f-b666-a93b75b8ab8c"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<IPython.core.display.HTML object>"],"text/html":["\n","     <input type=\"file\" id=\"files-f077e2a9-8b7a-4639-a074-84055becc15f\" name=\"files[]\" multiple disabled\n","        style=\"border:none\" />\n","     <output id=\"result-f077e2a9-8b7a-4639-a074-84055becc15f\">\n","      Upload widget is only available when the cell has been executed in the\n","      current browser session. Please rerun this cell to enable.\n","      </output>\n","      <script>// Copyright 2017 Google LLC\n","//\n","// Licensed under the Apache License, Version 2.0 (the \"License\");\n","// you may not use this file except in compliance with the License.\n","// You may obtain a copy of the License at\n","//\n","//      http://www.apache.org/licenses/LICENSE-2.0\n","//\n","// Unless required by applicable law or agreed to in writing, software\n","// distributed under the License is distributed on an \"AS IS\" BASIS,\n","// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n","// See the License for the specific language governing permissions and\n","// limitations under the License.\n","\n","/**\n"," * @fileoverview Helpers for google.colab Python module.\n"," */\n","(function(scope) {\n","function span(text, styleAttributes = {}) {\n","  const element = document.createElement('span');\n","  element.textContent = text;\n","  for (const key of Object.keys(styleAttributes)) {\n","    element.style[key] = styleAttributes[key];\n","  }\n","  return element;\n","}\n","\n","// Max number of bytes which will be uploaded at a time.\n","const MAX_PAYLOAD_SIZE = 100 * 1024;\n","\n","function _uploadFiles(inputId, outputId) {\n","  const steps = uploadFilesStep(inputId, outputId);\n","  const outputElement = document.getElementById(outputId);\n","  // Cache steps on the outputElement to make it available for the next call\n","  // to uploadFilesContinue from Python.\n","  outputElement.steps = steps;\n","\n","  return _uploadFilesContinue(outputId);\n","}\n","\n","// This is roughly an async generator (not supported in the browser yet),\n","// where there are multiple asynchronous steps and the Python side is going\n","// to poll for completion of each step.\n","// This uses a Promise to block the python side on completion of each step,\n","// then passes the result of the previous step as the input to the next step.\n","function _uploadFilesContinue(outputId) {\n","  const outputElement = document.getElementById(outputId);\n","  const steps = outputElement.steps;\n","\n","  const next = steps.next(outputElement.lastPromiseValue);\n","  return Promise.resolve(next.value.promise).then((value) => {\n","    // Cache the last promise value to make it available to the next\n","    // step of the generator.\n","    outputElement.lastPromiseValue = value;\n","    return next.value.response;\n","  });\n","}\n","\n","/**\n"," * Generator function which is called between each async step of the upload\n"," * process.\n"," * @param {string} inputId Element ID of the input file picker element.\n"," * @param {string} outputId Element ID of the output display.\n"," * @return {!Iterable<!Object>} Iterable of next steps.\n"," */\n","function* uploadFilesStep(inputId, outputId) {\n","  const inputElement = document.getElementById(inputId);\n","  inputElement.disabled = false;\n","\n","  const outputElement = document.getElementById(outputId);\n","  outputElement.innerHTML = '';\n","\n","  const pickedPromise = new Promise((resolve) => {\n","    inputElement.addEventListener('change', (e) => {\n","      resolve(e.target.files);\n","    });\n","  });\n","\n","  const cancel = document.createElement('button');\n","  inputElement.parentElement.appendChild(cancel);\n","  cancel.textContent = 'Cancel upload';\n","  const cancelPromise = new Promise((resolve) => {\n","    cancel.onclick = () => {\n","      resolve(null);\n","    };\n","  });\n","\n","  // Wait for the user to pick the files.\n","  const files = yield {\n","    promise: Promise.race([pickedPromise, cancelPromise]),\n","    response: {\n","      action: 'starting',\n","    }\n","  };\n","\n","  cancel.remove();\n","\n","  // Disable the input element since further picks are not allowed.\n","  inputElement.disabled = true;\n","\n","  if (!files) {\n","    return {\n","      response: {\n","        action: 'complete',\n","      }\n","    };\n","  }\n","\n","  for (const file of files) {\n","    const li = document.createElement('li');\n","    li.append(span(file.name, {fontWeight: 'bold'}));\n","    li.append(span(\n","        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n","        `last modified: ${\n","            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n","                                    'n/a'} - `));\n","    const percent = span('0% done');\n","    li.appendChild(percent);\n","\n","    outputElement.appendChild(li);\n","\n","    const fileDataPromise = new Promise((resolve) => {\n","      const reader = new FileReader();\n","      reader.onload = (e) => {\n","        resolve(e.target.result);\n","      };\n","      reader.readAsArrayBuffer(file);\n","    });\n","    // Wait for the data to be ready.\n","    let fileData = yield {\n","      promise: fileDataPromise,\n","      response: {\n","        action: 'continue',\n","      }\n","    };\n","\n","    // Use a chunked sending to avoid message size limits. See b/62115660.\n","    let position = 0;\n","    do {\n","      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n","      const chunk = new Uint8Array(fileData, position, length);\n","      position += length;\n","\n","      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n","      yield {\n","        response: {\n","          action: 'append',\n","          file: file.name,\n","          data: base64,\n","        },\n","      };\n","\n","      let percentDone = fileData.byteLength === 0 ?\n","          100 :\n","          Math.round((position / fileData.byteLength) * 100);\n","      percent.textContent = `${percentDone}% done`;\n","\n","    } while (position < fileData.byteLength);\n","  }\n","\n","  // All done.\n","  yield {\n","    response: {\n","      action: 'complete',\n","    }\n","  };\n","}\n","\n","scope.google = scope.google || {};\n","scope.google.colab = scope.google.colab || {};\n","scope.google.colab._files = {\n","  _uploadFiles,\n","  _uploadFilesContinue,\n","};\n","})(self);\n","</script> "]},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Saving heart.csv to heart.csv\n"]}]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0Zk9E-WfVjRK","executionInfo":{"status":"ok","timestamp":1696803640718,"user_tz":240,"elapsed":902,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}},"outputId":"ca48fd0f-573b-4d5d-b740-5535fd37d368"},"execution_count":5,"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"]}]},{"cell_type":"code","source":["dataset = pd.read_csv('/content/drive/MyDrive/ML project/heart_skewed_90_0_10_1.csv')\n","target_vector = (dataset['target'].values)\n","design = (dataset.drop(['target'], 'columns')).to_numpy()\n","\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wJou9UEWKL_B","executionInfo":{"status":"ok","timestamp":1696803755829,"user_tz":240,"elapsed":290,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}},"outputId":"cb854abc-78ed-4401-bae9-f43f57f4c0e0"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-27-57e18e76dc0a>:3: FutureWarning: In a future version of pandas all arguments of DataFrame.drop except for the argument 'labels' will be keyword-only.\n","  design = (dataset.drop(['target'], 'columns')).to_numpy()\n"]}]},{"cell_type":"code","source":["def train_model(X, y, eval_instances_ratio=0.2):\n","  # Calculate eval instances\n","  assert len(X) == len(y)\n","  eval_instances = int(np.ceil(len(X) * eval_instances_ratio))\n","\n","  # Shuffle, remove last eval_instances\n","  np.random.shuffle(X)\n","  train_x, eval_x = X[:eval_instances], X[-eval_instances:]\n","  train_y, eval_y = y[:eval_instances], y[-eval_instances:]\n","\n","  # Train model\n","  model = LogisticRegression(solver='lbfgs', max_iter=100000)\n","  model.fit(train_x, train_y)\n","  coef = model.coef_\n","  intercept = model.intercept_\n","  classes = model.classes_\n","  return coef, intercept, classes, model, eval_x, eval_y\n"],"metadata":{"id":"z7-CrmBw9f42","executionInfo":{"status":"ok","timestamp":1696803756942,"user_tz":240,"elapsed":127,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}}},"execution_count":28,"outputs":[]},{"cell_type":"code","source":["#TOTAL_SAMPLES = 1000000\n","SPLITS = 5\n","\n","# Generate syntetic dataset\n","#x, y = make_classification(n_samples=TOTAL_SAMPLES, n_features=10, random_state=42)\n","\n","# Split x, y\n","x_splits = np.split(design, SPLITS)\n","y_splits = np.split(target_vector, SPLITS)\n","\n","# Train seperate models\n","coefs, intercepts, evals_x, evals_y = [] , [] , [], []\n","classes = None\n","split_models = []\n","for i in range(SPLITS-1):\n","  x = x_splits[i]\n","  y = y_splits[i]\n","\n","  coef, intercept, classes, model, eval_x, eval_y = train_model(x, y)\n","  coefs.append(coef)\n","  intercepts.append(intercept)\n","  evals_x.append(eval_x)\n","  evals_y.append(eval_y)\n","  split_models.append(model)\n","\n","  classes = classes\n","\n","\n","aggregate_model = LogisticRegression()\n","\n","avg_agg_coefs = np.sum(np.sum(coefs, axis=1), axis=0) / (SPLITS-1)\n","aggregate_model.coef_ = avg_agg_coefs.reshape(1, 13)\n","\n","avg_agg_intercepts = np.array(np.sum(intercepts) / (SPLITS-1))\n","aggregate_model.intercept_ = avg_agg_intercepts.reshape(1,)\n","\n","aggregate_model.classes_ = classes\n","\n","test_x, test_y = x_splits[-1], y_splits[-1]\n","\n","score = aggregate_model.score(test_x, test_y)\n","print(score)\n","\n","split_scores = []\n","for idx, model in enumerate(split_models):\n","  score = model.score(test_x, test_y)\n","  print(f\"Split number {idx+1}: {score}\")\n","  split_scores.append(score)\n","\n","print(f\"Average split scores: {np.mean(split_scores)}\")"],"metadata":{"id":"U19jDKB67Cor","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1696803804569,"user_tz":240,"elapsed":292,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}},"outputId":"12c1975f-d81e-4fac-b1bc-e7cccb7e194b"},"execution_count":39,"outputs":[{"output_type":"stream","name":"stdout","text":["0.8780487804878049\n","Split number 1: 0.8292682926829268\n","Split number 2: 0.8341463414634146\n","Split number 3: 0.8390243902439024\n","Split number 4: 0.7463414634146341\n","Average split scores: 0.8121951219512196\n"]}]},{"cell_type":"code","source":["full_model = LogisticRegression(solver='lbfgs', max_iter=100000)\n","X_train, X_test, y_train, y_test = train_test_split(design, target_vector, test_size=0.2, random_state=42)\n","full_model.fit(X_train, y_train)\n","full_score = full_model.score(X_test, y_test)\n","print(full_score)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UjcUuU5ANrOP","executionInfo":{"status":"ok","timestamp":1696803699797,"user_tz":240,"elapsed":500,"user":{"displayName":"Aarav Mehta","userId":"12641069548487139067"}},"outputId":"a28573f6-ea6d-4363-e05a-b07ce0c7e825"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["0.6634146341463415\n"]}]}]}